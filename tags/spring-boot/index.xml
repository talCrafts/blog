<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot on TalCrafts Blog</title>
    <link>http://www.talcrafts.com/tags/spring-boot/index.xml</link>
    <description>Recent content in Spring Boot on TalCrafts Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.talcrafts.com/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Spring boot CommandLineRunner Interface</title>
      <link>http://www.talcrafts.com/2017/03/spring-boot-commandlinerunner-interface/</link>
      <pubDate>Fri, 10 Mar 2017 22:30:46 +0530</pubDate>
      
      <guid>http://www.talcrafts.com/2017/03/spring-boot-commandlinerunner-interface/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot provides an interface called &lt;code&gt;CommandLineRunner&lt;/code&gt; which is used indicate that a bean should run when it is contained within a &lt;code&gt;SpringApplication&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can define multiple &lt;code&gt;CommandLineRunner&lt;/code&gt; beans in the same application context and set their order by using &lt;code&gt;Ordered&lt;/code&gt; interface or by using &lt;code&gt;@Order&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;public interface CommandLineRunner {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Callback used to run the bean.
 * @param args incoming main method arguments
 * @throws Exception on error
 */
void run(String... args) throws Exception;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we have two beans &lt;code&gt;Greeting&lt;/code&gt; and &lt;code&gt;GreetingReply&lt;/code&gt; which implement &lt;code&gt;CommandLineRunner&lt;/code&gt; interface.&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums-1&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;package com.talcrafts;&lt;/p&gt;

&lt;p&gt;import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;&lt;/p&gt;

&lt;p&gt;@SpringBootApplication
public class BlogCodeApplication {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static void main(String[] args) {
    SpringApplication.run(BlogCodeApplication.class, args);
}


@Component
@Order(1)
class Greeting implements CommandLineRunner {

    @Override
    public void run(String... args) throws Exception {
        System.out.println(&amp;quot;He said: Hello, how are you ?&amp;quot;);
    }
}

@Component
@Order(2)
class GreetingReply implements CommandLineRunner {

    @Override
    public void run(String... args) throws Exception {
        System.out.println(&amp;quot;She replied: I am doing good..thanks for asking!&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;When we run this application, the following output is printed on console.&lt;/p&gt;

&lt;h2 id=&#34;source-java&#34;&gt;[source,java]&lt;/h2&gt;

&lt;p&gt;&amp;hellip;.
He said: Hello, how are you ?
She replied: I am doing good..thanks for asking! :&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;&amp;hellip;.&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Conclusion&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article, we saw how to use &lt;code&gt;CommandLineRunner&lt;/code&gt; interface. It is very usefull when we don&amp;rsquo;t have any UI to trigger something or we want something to execute just after the application context is up.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>