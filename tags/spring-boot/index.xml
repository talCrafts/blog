<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring Boot on TalCrafts Blog</title>
    <link>http://www.talcrafts.com/tags/spring-boot/index.xml</link>
    <description>Recent content in Spring Boot on TalCrafts Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.talcrafts.com/tags/spring-boot/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Spring boot CommandLineRunner Interface</title>
      <link>http://www.talcrafts.com/2017/03/spring-boot-commandlinerunner-interface/</link>
      <pubDate>Fri, 10 Mar 2017 22:30:46 +0530</pubDate>
      
      <guid>http://www.talcrafts.com/2017/03/spring-boot-commandlinerunner-interface/</guid>
      <description>**Introduction**

Spring Boot provides an interface called `CommandLineRunner` which is used indicate that a bean should run when it is contained within a `SpringApplication`.

We can define multiple `CommandLineRunner` beans in the same application context and set their order by using `Ordered` interface or by using `@Order` annotation.



[source,java,linenums]
----
public interface CommandLineRunner {

	/**
	 * Callback used to run the bean.
	 * @param args incoming main method arguments
	 * @throws Exception on error
	 */
	void run(String... args) throws Exception;

}
----

**Example**

Here we have two beans `Greeting` and `GreetingReply` which implement `CommandLineRunner` interface.

[source,java,linenums]
----
package com.talcrafts;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

@SpringBootApplication
public class BlogCodeApplication {

    public static void main(String[] args) {
        SpringApplication.run(BlogCodeApplication.class, args);
    }


    @Component
    @Order(1)
    class Greeting implements CommandLineRunner {

        @Override
        public void run(String... args) throws Exception {
            System.out.println(&#34;He said: Hello, how are you ?&#34;);
        }
    }

    @Component
    @Order(2)
    class GreetingReply implements CommandLineRunner {

        @Override
        public void run(String... args) throws Exception {
            System.out.println(&#34;She replied: I am doing good..thanks for asking!&#34;);
        }
    }

}
----

When we run this application, the following output is printed on console.

[source,java]
----
....
He said: Hello, how are you ?
She replied: I am doing good..thanks for asking! :
....
----

*Conclusion*

In this article, we saw how to use `CommandLineRunner` interface. It is very usefull when we don&#39;t have any UI to trigger something or we want something to execute just after the application context is up.</description>
    </item>
    
  </channel>
</rss>