<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lombok on TalCrafts Blog</title>
    <link>http://www.talcrafts.com/tags/lombok/index.xml</link>
    <description>Recent content in Lombok on TalCrafts Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.talcrafts.com/tags/lombok/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Make your Java code concise with Lombok</title>
      <link>http://www.talcrafts.com/2017/03/make-your-java-code-concise-with-lombok/</link>
      <pubDate>Mon, 13 Mar 2017 16:47:50 +0530</pubDate>
      
      <guid>http://www.talcrafts.com/2017/03/make-your-java-code-concise-with-lombok/</guid>
      <description>*Introduction*

In every so called plain-old-java-object(POJO), each instance property has `getter` and `setter` methods. We can write these methods by ourselves or can generate them using any IDE(like Eclipse, IntelliJ). Apart from these accessor and mutator methods, we have to write `toString()`, `hashCode()` and `equals()` methods. These methods make class look cluttered. Using Lombok, We can generate these methods simply by using annotations.


*Installing Lombok*

*_Eclipse_*

  1. Download Lombok from
  https://projectlombok.org/download.html.
  2. Run it by double clicking on it or by firing java -jar lombok.jar.
  3. It will open an explorer window like shown as below:
  image: /img/lombok_screen1.png[Lombok,align=&#34;center&#34;]
  4. Point to folder containing Eclipse by clicking Specify Location..
  5. After that, click on Install/Update
  6. Once installation is done...add Lombok dependency in the project and restart Eclipse.
    If it is not working then, you have to start Eclipse by firing `$ECLIPSE_HOME/eclipse --clean`.

*_IntelliJ_*

Here is a plugin and installation instructions https://github.com/mplushnikov/lombok-intellij-plugin

*Using Lombok*

Add `lombok.jar` in your Java project, either using Maven, Gradle or any other build tools. Below is a sample `build.gradle` file.
[source]
----
dependencies {
    ........
    compile group: &#39;org.projectlombok&#39;, name: &#39;lombok&#39;, version: &#39;1.16.10&#39;
    ........
}
----

*Annotations Provided by Lombok*

*_@Getter and @Setter_*

[source,java,linenums]
----
package com.imti.lombok;
@Getter
@Setter
public class GetterSetterLombok {
    private String name;
    private String message;
}
----
This will generate `public` getter/setter for every non-static field. If you want to define access level, it can be done by specifying `AccessLevel`

e.g.: `@Setter(AccessLevel.PROTECTED) private String name;`

If you do NOT want to generate getter/setter for a particular field, then you can disable it by invoking `AccessLevel.NONE`.

[source,java,linenums]
package com.imti.lombok;
@Getter
@Setter
public class GetterSetterLombok {
    @Setter(AccessLevel.NONE)
    private Long id;
    private String name;
    private String message;
}

*_@ToString_*

By default, all non-static field will be included. If you want to exclude any, define them in `exclude` parameter.
[source,java,linenums]
----
package com.imti.lombok;
//This will print value of
all fields except id (excluded) and STATIC_VAR(static field).
/* created by imteyaza on 6/8/2016 */
@ToString(exclude=&#34;id&#34;)
public class HelloLombok {
	private static final int STATIC_VAR=10;
	private String id;
	private String name;
	private String message;
}
----
Here is test class for the same.

[source,java,linenums]
----
public class HelloLombokTest {
    @Test
    public void testToString(){
        HelloLombok helloLombok = new HelloLombok();
        helloLombok.setId(&#34;imti&#34;);
        helloLombok.setMessage(&#34;Hello Lombok!&#34;);
        helloLombok.setName(&#34;Imteyaz&#34;);
        System.out.println(helloLombok.toString());
    }
}
----
Output of this test is: +
`HelloLombok(name=Imteyaz, message=Hello Lombok!)`

Note: If you, by mistake, typed name of non-existing field, it will generate a warning!

[source,java,linenums]
----
package com.imti.lombok;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
//Created by imteyaza on 3/8/16.
@Getter
@Setter
@ToString(exclude = {&#34;id&#34;, &#34;name&#34;,&#34;hell&#34;})
public class HelloLombok {
    private static final int VALUE = 10;
    private String id;
    private String name;
    private String message;
}
----

This will generate a warning `The field &#39;hell&#39; does not exist`

*_@Log_*

For using any logging library, configure it as per the instructions by provider,then use it&#39;s annotation. for example for Log4j2, we will use `@Log4j2`

[source,java,linenums]
----
@Log4j2
public class HelloWorld {
	private String name;
	public static void main(String args []){
		log.info(&#34;Inside the main method&#34;);
	}
}
----
It creates following line for you +
`private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(HelloWorld.class);`

For other supported logging library, please refer to https://projectlombok.org/features/Log.html

*_@Cleanup (My favourite)_*

[source,java,linenums]
----
package com.imti.lombok;
import lombok.Cleanup;
import java.io.*;
//Created by imteyaza on 3/8/16.
public class ResourceCleanupLombok {
    public void readFile(String inputFileName, String outputFileName)
        throws IOException {
        @Cleanup InputStream inputStream = new FileInputStream(inputFileName);
        @Cleanup OutputStream outputStream = new FileOutputStream(outputFileName);
        byte[] buffer = new byte[1024];
        while (true) {
            int line = inputStream.read(buffer);
            if (line == -1) {
                break;
            }
            outputStream.write(buffer, 0, line);
        }
    }
}
----
[%hardbreaks]
By default it looks for a method called `close()` in the type of Object you are cleaning up.If you have a custom method name, it can called as `@Cleanup(&#34;destroy&#34;)`.

[NOTE]
`The destroy() method must be a non-argument method.`

*_@EqualsAndHashCode_*

If a class is annotated with @EqualsAndHashCode,it will use all non-static fields, by default. +
If you want to exclude some parameter, it can be done by defining `exclude={&#34;&lt;field name&gt;&#34;}`. If the `&lt;field name&gt;` does not exist, it will generate a warning.

[source,java,linenums]
----
package com.imti.lombok;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
//Created by imteyaza on 5/8/16.
@EqualsAndHashCode(exclude = {&#34;id&#34;,&#34;name&#34;,&#34;hell&#34;})
@Getter
@Setter
@ToString
public class EqualAndHashcodeExample {
    private static int COUNTER = 10;
    private String id;
    private String name;
    private String message;
}
----
This will generate a warning `The field &#39;hell&#39; does not exist`


*_@NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor_*

_@NoArgsConstructor:_ generates default or no-arguments constructor for the class.
_@RequiredArgsConstructor:_ creates a constructor with 1 parameter for each non-initialized final field.

[source,java,linenums]
----
package com.imti.lombok;
import lombok.*;
//Created by imteyaza on 6/8/16.
@Getter
@Setter
@ToString(exclude = {&#34;id&#34;, &#34;name&#34;})
@RequiredArgsConstructor
public class HelloLombok {
    private static final int VALUE = 10;
    private String id;
    private String name;
    private final String message;
}
----
will generate a class like below:

[source,java,linenums]
----
package com.imti.lombok;
import lombok.*;
// Created by imteyaza on 6/8/16.
public class HelloLombok {
    private static final int VALUE = 10;
    private String id;
    private String name;
    private final String message;
    //Other codes omitted for brevity
    public HelloLombok(final String message) {
        this.message = message;
    }
    //Other codes omitted for brevity
}
----

_@AllArgsConstructor:_ will create a constructor with all fields.

*_@Data_*

It bundles @Getter/@Setter, @ToString, @EqualsAndHashCode and @RequiredArgsConstructor.

*_Conclusion_*
These were some of the features provided by Lombok. Here is a link to list of all features-
`https://projectlombok.org/features/index.html`

*References*

_Lombok Project Page:_  https://projectlombok.org/index.html

_Download and installation instructions:_ https://projectlombok.org/download.html

_IntelliJ plugin and installation instructions:_ https://github.com/mplushnikov/lombok-intellij-plugin

_Sample application:_
https://github.com/ahmadimt/JavaWithLombok</description>
    </item>
    
  </channel>
</rss>