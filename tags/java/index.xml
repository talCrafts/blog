<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on TalCrafts Blog</title>
    <link>http://www.talcrafts.com/tags/java/index.xml</link>
    <description>Recent content in Java on TalCrafts Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.talcrafts.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Make your Java code concise with Lombok</title>
      <link>http://www.talcrafts.com/2017/03/make-your-java-code-concise-with-lombok/</link>
      <pubDate>Mon, 13 Mar 2017 16:47:50 +0530</pubDate>
      
      <guid>http://www.talcrafts.com/2017/03/make-your-java-code-concise-with-lombok/</guid>
      <description>&lt;p&gt;&lt;em&gt;Introduction&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In every so called plain-old-java-object(POJO), each instance property has &lt;code&gt;getter&lt;/code&gt; and &lt;code&gt;setter&lt;/code&gt; methods. We can write these methods by ourselves or can generate them using any IDE(like Eclipse, IntelliJ). Apart from these accessor and mutator methods, we have to write &lt;code&gt;toString()&lt;/code&gt;, &lt;code&gt;hashCode()&lt;/code&gt; and &lt;code&gt;equals()&lt;/code&gt; methods. These methods make class look cluttered. Using Lombok, We can generate these methods simply by using annotations.&lt;/p&gt;

&lt;p&gt;
&lt;em&gt;Installing Lombok&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;Eclipse&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download Lombok from
&lt;a href=&#34;https://projectlombok.org/download.html&#34;&gt;https://projectlombok.org/download.html&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Run it by double clicking on it or by firing java -jar lombok.jar.&lt;/li&gt;
&lt;li&gt;It will open an explorer window like shown as below:
image: /img/lombok_screen1.png[Lombok,align=&amp;ldquo;center&amp;rdquo;]&lt;/li&gt;
&lt;li&gt;Point to folder containing Eclipse by clicking Specify Location..&lt;/li&gt;
&lt;li&gt;After that, click on Install/Update&lt;/li&gt;
&lt;li&gt;Once installation is done&amp;hellip;add Lombok dependency in the project and restart Eclipse.
If it is not working then, you have to start Eclipse by firing &lt;code&gt;$ECLIPSE_HOME/eclipse --clean&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;IntelliJ&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here is a plugin and installation instructions &lt;a href=&#34;https://github.com/mplushnikov/lombok-intellij-plugin&#34;&gt;https://github.com/mplushnikov/lombok-intellij-plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Using Lombok&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Add &lt;code&gt;lombok.jar&lt;/code&gt; in your Java project, either using Maven, Gradle or any other build tools. Below is a sample &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&#34;source&#34;&gt;[source]&lt;/h2&gt;

&lt;p&gt;dependencies {
    &amp;hellip;&amp;hellip;..
    compile group: &amp;lsquo;org.projectlombok&amp;rsquo;, name: &amp;lsquo;lombok&amp;rsquo;, version: &amp;lsquo;1.16.10&amp;rsquo;
    &amp;hellip;&amp;hellip;..&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Annotations Provided by Lombok&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;@Getter and @Setter&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;package com.imti.lombok;
@Getter
@Setter
public class GetterSetterLombok {
    private String name;
    private String message;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;This will generate &lt;code&gt;public&lt;/code&gt; getter/setter for every non-static field. If you want to define access level, it can be done by specifying &lt;code&gt;AccessLevel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;e.g.: &lt;code&gt;@Setter(AccessLevel.PROTECTED) private String name;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you do NOT want to generate getter/setter for a particular field, then you can disable it by invoking &lt;code&gt;AccessLevel.NONE&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;[source,java,linenums]
package com.imti.lombok;
@Getter
@Setter
public class GetterSetterLombok {
    @Setter(AccessLevel.NONE)
    private Long id;
    private String name;
    private String message;
}&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;@ToString&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;By default, all non-static field will be included. If you want to exclude any, define them in &lt;code&gt;exclude&lt;/code&gt; parameter.&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums-1&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;package com.imti.lombok;
//This will print value of
all fields except id (excluded) and STATIC_VAR(static field).
/* created by imteyaza on 6/8/2016 */
@ToString(exclude=&amp;ldquo;id&amp;rdquo;)
public class HelloLombok {
    private static final int STATIC_VAR=10;
    private String id;
    private String name;
    private String message;&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;Here is test class for the same.&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums-2&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;public class HelloLombokTest {
    @Test
    public void testToString(){
        HelloLombok helloLombok = new HelloLombok();
        helloLombok.setId(&amp;ldquo;imti&amp;rdquo;);
        helloLombok.setMessage(&amp;ldquo;Hello Lombok!&amp;rdquo;);
        helloLombok.setName(&amp;ldquo;Imteyaz&amp;rdquo;);
        System.out.println(helloLombok.toString());
    }&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;Output of this test is: +
&lt;code&gt;HelloLombok(name=Imteyaz, message=Hello Lombok!)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: If you, by mistake, typed name of non-existing field, it will generate a warning!&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums-3&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;package com.imti.lombok;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
//Created by imteyaza on 3/8/16.
@Getter
@Setter
@ToString(exclude = {&amp;ldquo;id&amp;rdquo;, &amp;ldquo;name&amp;rdquo;,&amp;ldquo;hell&amp;rdquo;})
public class HelloLombok {
    private static final int VALUE = 10;
    private String id;
    private String name;
    private String message;&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;This will generate a warning &lt;code&gt;The field &#39;hell&#39; does not exist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;@Log&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For using any logging library, configure it as per the instructions by provider,then use it&amp;rsquo;s annotation. for example for Log4j2, we will use &lt;code&gt;@Log4j2&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums-4&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;@Log4j2
public class HelloWorld {
    private String name;
    public static void main(String args []){
        log.info(&amp;ldquo;Inside the main method&amp;rdquo;);
    }&lt;/p&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;It creates following line for you +
&lt;code&gt;private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(HelloWorld.class);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For other supported logging library, please refer to &lt;a href=&#34;https://projectlombok.org/features/Log.html&#34;&gt;https://projectlombok.org/features/Log.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;@Cleanup (My favourite)&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums-5&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;package com.imti.lombok;
import lombok.Cleanup;
import java.io.*;
//Created by imteyaza on 3/8/16.
public class ResourceCleanupLombok {
    public void readFile(String inputFileName, String outputFileName)
        throws IOException {
        @Cleanup InputStream inputStream = new FileInputStream(inputFileName);
        @Cleanup OutputStream outputStream = new FileOutputStream(outputFileName);
        byte[] buffer = new byte[1024];
        while (true) {
            int line = inputStream.read(buffer);
            if (line == -1) {
                break;
            }
            outputStream.write(buffer, 0, line);
        }
    }&lt;/p&gt;

&lt;h2 id=&#34;toc_13&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;[%hardbreaks]
By default it looks for a method called &lt;code&gt;close()&lt;/code&gt; in the type of Object you are cleaning up.If you have a custom method name, it can called as &lt;code&gt;@Cleanup(&amp;quot;destroy&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;[NOTE]
&lt;code&gt;The destroy() method must be a non-argument method.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;@EqualsAndHashCode&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If a class is annotated with @EqualsAndHashCode,it will use all non-static fields, by default. +
If you want to exclude some parameter, it can be done by defining &lt;code&gt;exclude={&amp;quot;&amp;lt;field name&amp;gt;&amp;quot;}&lt;/code&gt;. If the &lt;code&gt;&amp;lt;field name&amp;gt;&lt;/code&gt; does not exist, it will generate a warning.&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums-6&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;package com.imti.lombok;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
//Created by imteyaza on 5/8/16.
@EqualsAndHashCode(exclude = {&amp;ldquo;id&amp;rdquo;,&amp;ldquo;name&amp;rdquo;,&amp;ldquo;hell&amp;rdquo;})
@Getter
@Setter
@ToString
public class EqualAndHashcodeExample {
    private static int COUNTER = 10;
    private String id;
    private String name;
    private String message;&lt;/p&gt;

&lt;h2 id=&#34;toc_15&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;This will generate a warning &lt;code&gt;The field &#39;hell&#39; does not exist&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;@NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;@NoArgsConstructor:&lt;/em&gt; generates default or no-arguments constructor for the class.
&lt;em&gt;@RequiredArgsConstructor:&lt;/em&gt; creates a constructor with 1 parameter for each non-initialized final field.&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums-7&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;package com.imti.lombok;
import lombok.*;
//Created by imteyaza on 6/8/16.
@Getter
@Setter
@ToString(exclude = {&amp;ldquo;id&amp;rdquo;, &amp;ldquo;name&amp;rdquo;})
@RequiredArgsConstructor
public class HelloLombok {
    private static final int VALUE = 10;
    private String id;
    private String name;
    private final String message;&lt;/p&gt;

&lt;h2 id=&#34;toc_17&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;will generate a class like below:&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums-8&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;package com.imti.lombok;
import lombok.*;
// Created by imteyaza on 6/8/16.
public class HelloLombok {
    private static final int VALUE = 10;
    private String id;
    private String name;
    private final String message;
    //Other codes omitted for brevity
    public HelloLombok(final String message) {
        this.message = message;
    }
    //Other codes omitted for brevity&lt;/p&gt;

&lt;h2 id=&#34;toc_19&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;@AllArgsConstructor:&lt;/em&gt; will create a constructor with all fields.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;@Data&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It bundles @Getter/@Setter, @ToString, @EqualsAndHashCode and @RequiredArgsConstructor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;Conclusion&lt;/em&gt;&lt;/em&gt;
These were some of the features provided by Lombok. Here is a link to list of all features-
&lt;code&gt;https://projectlombok.org/features/index.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;References&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lombok Project Page:&lt;/em&gt;  &lt;a href=&#34;https://projectlombok.org/index.html&#34;&gt;https://projectlombok.org/index.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Download and installation instructions:&lt;/em&gt; &lt;a href=&#34;https://projectlombok.org/download.html&#34;&gt;https://projectlombok.org/download.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;IntelliJ plugin and installation instructions:&lt;/em&gt; &lt;a href=&#34;https://github.com/mplushnikov/lombok-intellij-plugin&#34;&gt;https://github.com/mplushnikov/lombok-intellij-plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Sample application:&lt;/em&gt;
&lt;a href=&#34;https://github.com/ahmadimt/JavaWithLombok&#34;&gt;https://github.com/ahmadimt/JavaWithLombok&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Spring boot CommandLineRunner Interface</title>
      <link>http://www.talcrafts.com/2017/03/spring-boot-commandlinerunner-interface/</link>
      <pubDate>Fri, 10 Mar 2017 22:30:46 +0530</pubDate>
      
      <guid>http://www.talcrafts.com/2017/03/spring-boot-commandlinerunner-interface/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Spring Boot provides an interface called &lt;code&gt;CommandLineRunner&lt;/code&gt; which is used indicate that a bean should run when it is contained within a &lt;code&gt;SpringApplication&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can define multiple &lt;code&gt;CommandLineRunner&lt;/code&gt; beans in the same application context and set their order by using &lt;code&gt;Ordered&lt;/code&gt; interface or by using &lt;code&gt;@Order&lt;/code&gt; annotation.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;public interface CommandLineRunner {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/**
 * Callback used to run the bean.
 * @param args incoming main method arguments
 * @throws Exception on error
 */
void run(String... args) throws Exception;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we have two beans &lt;code&gt;Greeting&lt;/code&gt; and &lt;code&gt;GreetingReply&lt;/code&gt; which implement &lt;code&gt;CommandLineRunner&lt;/code&gt; interface.&lt;/p&gt;

&lt;h2 id=&#34;source-java-linenums-1&#34;&gt;[source,java,linenums]&lt;/h2&gt;

&lt;p&gt;package com.talcrafts;&lt;/p&gt;

&lt;p&gt;import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;&lt;/p&gt;

&lt;p&gt;@SpringBootApplication
public class BlogCodeApplication {&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static void main(String[] args) {
    SpringApplication.run(BlogCodeApplication.class, args);
}


@Component
@Order(1)
class Greeting implements CommandLineRunner {

    @Override
    public void run(String... args) throws Exception {
        System.out.println(&amp;quot;He said: Hello, how are you ?&amp;quot;);
    }
}

@Component
@Order(2)
class GreetingReply implements CommandLineRunner {

    @Override
    public void run(String... args) throws Exception {
        System.out.println(&amp;quot;She replied: I am doing good..thanks for asking!&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;}&lt;/h2&gt;

&lt;p&gt;When we run this application, the following output is printed on console.&lt;/p&gt;

&lt;h2 id=&#34;source-java&#34;&gt;[source,java]&lt;/h2&gt;

&lt;p&gt;&amp;hellip;.
He said: Hello, how are you ?
She replied: I am doing good..thanks for asking! :&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;&amp;hellip;.&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Conclusion&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this article, we saw how to use &lt;code&gt;CommandLineRunner&lt;/code&gt; interface. It is very usefull when we don&amp;rsquo;t have any UI to trigger something or we want something to execute just after the application context is up.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>