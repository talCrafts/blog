<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on TalCrafts Blog</title>
    <link>http://www.talcrafts.com/post/index.xml</link>
    <description>Recent content in Posts on TalCrafts Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Mar 2017 14:21:41 +0530</lastBuildDate>
    <atom:link href="http://www.talcrafts.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>What is data science?</title>
      <link>http://www.talcrafts.com/2017/03/what-is-data-science/</link>
      <pubDate>Thu, 30 Mar 2017 14:21:41 +0530</pubDate>
      
      <guid>http://www.talcrafts.com/2017/03/what-is-data-science/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I heard about this term &amp;lsquo;data science&amp;rsquo; quite recently. Many blogs, articles can be found over the net which talk about how to do data science. As businesses started seeing value in doing data science, overall tech industry is shifting its gears and making sure that their people have required skills to do data science. In fact, I too recently started attending classes to learn probability theory. Different people mean different things when they use the term &amp;lsquo;data science&amp;rsquo;. Few confuse it with &amp;lsquo;big data&amp;rsquo;. So I thought of writing this blog to explain &amp;lsquo;what is data science&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is it?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If we google dictionary meaning of two terms &amp;lsquo;data&amp;rsquo; and &amp;lsquo;science&amp;rsquo;, we get below definitions:&lt;/p&gt;

&lt;p&gt;Data: (noun) facts and statistics collected together for reference or analysis&lt;/p&gt;

&lt;p&gt;Science:(noun) A systematically organized body of knowledge on a particular subject&lt;/p&gt;

&lt;p&gt;Data science is all about the knowledge of data. But what is a knowledge? Knowledge is &amp;lsquo;Facts, information, and skills acquired by a person through experience or education&amp;rsquo;. Knowledge is &amp;lsquo;the theoretical or practical understanding of a subject&amp;rsquo;. So data science is a faculty of science which deals with analysis of collected facts and statistics to gain more knowledge about data.&lt;/p&gt;

&lt;p&gt;To be able to gain more knowledge about data, one should have&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Good hacking skills (A different way to look at data and an interest to play with data to gain knowledge about it)&lt;/li&gt;
&lt;li&gt;Knowledge of mathematics and statistics - so that you know how to play with data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Data science is a journey from &amp;lsquo;data&amp;rsquo; to &amp;lsquo;insights&amp;rsquo;. It is different from big data in that big data deals with processing of a huge amount of data which cannot be accomodated/processed on a single machine. This &amp;lsquo;processing&amp;rsquo; could be anything and may be not at all be targeted to do analysis of data. Data science is about applying different mathematical and statistical models to your data to gain more insights hidden into your data. This can be done on even a small sample dataset and you need probably do not need big data to do it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We are living in the age of data. Lots and lots of data is collected for actions users perform while they simply browse over the internet or buy things at shopping malls or travel to a place during vacation or monitor their fitness using apps like google fit. This collected data can be analyzed with the help of data science to understand more insights from it. These insights can help businesses to recommend right products to their customers or for non-business causes like improving the health of the society.&lt;/p&gt;

&lt;p&gt;Appreciate your comments/feedback/suggestions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Data_science&#34;&gt;https://en.wikipedia.org/wiki/Data_science&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Edge Computing</title>
      <link>http://www.talcrafts.com/2017/03/edge-computing/</link>
      <pubDate>Wed, 22 Mar 2017 20:14:19 +0530</pubDate>
      
      <guid>http://www.talcrafts.com/2017/03/edge-computing/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Waves of changes in technology is cycling just like fashion cycles, old becomes new and new becomes old in cycle fasion. Same applies to technology in terms of Server to Client and Client to Server. In this I refer server which is away from end user and client is compute device near to end User.&lt;/p&gt;

&lt;p&gt;Now if we dare to look beyond Cloud era, what do you think will be possible if we try to predict future by looking at past.  Well I can think of Edge or Fog Computing.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s it ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In simple words, Edge or Fog Computing means pushing intelligence towards end nodes of network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Forces Behind Edge Computing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;IoT:-&lt;/em&gt;  Now a days, IoT is enabled on almost every device which generated a lot of data. The genearted data is going to increase many fold as more and more device will get connected to Internet of Everything. This will put a lot of pressure on centralized infrastructure. Hence, it pushes the compute to be done on end user devices.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Unreliable Network:-&lt;/em&gt;  Also newtork connectivity to these devices may not be as reliable and hence they have to work equaly well in both- online/offline mode .&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Low cost and more compute capabilities of end user devices:-&lt;/em&gt;  Another reason is the cost of these devices is gettting lower and lower and amount of compute offered by them is increasing many fold. Economically it will be foolish not use power available at end nodes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Puting this all togther will move us to new era of Edge Computing just like PC took Mainframes. Again they will complement Cloud insted of replacing it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further Reading&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.openfogconsortium.org/resources/&#34;&gt;https://www.openfogconsortium.org/resources/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Make your Java code concise with Lombok</title>
      <link>http://www.talcrafts.com/2017/03/make-your-java-code-concise-with-lombok/</link>
      <pubDate>Mon, 13 Mar 2017 16:47:50 +0530</pubDate>
      
      <guid>http://www.talcrafts.com/2017/03/make-your-java-code-concise-with-lombok/</guid>
      <description>*Introduction*

In every so called plain-old-java-object(POJO), each instance property has `getter` and `setter` methods. We can write these methods by ourselves or can generate them using any IDE(like Eclipse, IntelliJ). Apart from these accessor and mutator methods, we have to write `toString()`, `hashCode()` and `equals()` methods. These methods make class look cluttered. Using Lombok, We can generate these methods simply by using annotations.


*Installing Lombok*

*_Eclipse_*

  1. Download Lombok from
  https://projectlombok.org/download.html.
  2. Run it by double clicking on it or by firing java -jar lombok.jar.
  3. It will open an explorer window like shown as below:
  image: /img/lombok_screen1.png[Lombok,align=&#34;center&#34;]
  4. Point to folder containing Eclipse by clicking Specify Location..
  5. After that, click on Install/Update
  6. Once installation is done...add Lombok dependency in the project and restart Eclipse.
    If it is not working then, you have to start Eclipse by firing `$ECLIPSE_HOME/eclipse --clean`.

*_IntelliJ_*

Here is a plugin and installation instructions https://github.com/mplushnikov/lombok-intellij-plugin

*Using Lombok*

Add `lombok.jar` in your Java project, either using Maven, Gradle or any other build tools. Below is a sample `build.gradle` file.
[source]
----
dependencies {
    ........
    compile group: &#39;org.projectlombok&#39;, name: &#39;lombok&#39;, version: &#39;1.16.10&#39;
    ........
}
----

*Annotations Provided by Lombok*

*_@Getter and @Setter_*

[source,java,linenums]
----
package com.imti.lombok;
@Getter
@Setter
public class GetterSetterLombok {
    private String name;
    private String message;
}
----
This will generate `public` getter/setter for every non-static field. If you want to define access level, it can be done by specifying `AccessLevel`

e.g.: `@Setter(AccessLevel.PROTECTED) private String name;`

If you do NOT want to generate getter/setter for a particular field, then you can disable it by invoking `AccessLevel.NONE`.

[source,java,linenums]
package com.imti.lombok;
@Getter
@Setter
public class GetterSetterLombok {
    @Setter(AccessLevel.NONE)
    private Long id;
    private String name;
    private String message;
}

*_@ToString_*

By default, all non-static field will be included. If you want to exclude any, define them in `exclude` parameter.
[source,java,linenums]
----
package com.imti.lombok;
//This will print value of
all fields except id (excluded) and STATIC_VAR(static field).
/* created by imteyaza on 6/8/2016 */
@ToString(exclude=&#34;id&#34;)
public class HelloLombok {
	private static final int STATIC_VAR=10;
	private String id;
	private String name;
	private String message;
}
----
Here is test class for the same.

[source,java,linenums]
----
public class HelloLombokTest {
    @Test
    public void testToString(){
        HelloLombok helloLombok = new HelloLombok();
        helloLombok.setId(&#34;imti&#34;);
        helloLombok.setMessage(&#34;Hello Lombok!&#34;);
        helloLombok.setName(&#34;Imteyaz&#34;);
        System.out.println(helloLombok.toString());
    }
}
----
Output of this test is: +
`HelloLombok(name=Imteyaz, message=Hello Lombok!)`

Note: If you, by mistake, typed name of non-existing field, it will generate a warning!

[source,java,linenums]
----
package com.imti.lombok;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
//Created by imteyaza on 3/8/16.
@Getter
@Setter
@ToString(exclude = {&#34;id&#34;, &#34;name&#34;,&#34;hell&#34;})
public class HelloLombok {
    private static final int VALUE = 10;
    private String id;
    private String name;
    private String message;
}
----

This will generate a warning `The field &#39;hell&#39; does not exist`

*_@Log_*

For using any logging library, configure it as per the instructions by provider,then use it&#39;s annotation. for example for Log4j2, we will use `@Log4j2`

[source,java,linenums]
----
@Log4j2
public class HelloWorld {
	private String name;
	public static void main(String args []){
		log.info(&#34;Inside the main method&#34;);
	}
}
----
It creates following line for you +
`private static final org.apache.logging.log4j.Logger log = org.apache.logging.log4j.LogManager.getLogger(HelloWorld.class);`

For other supported logging library, please refer to https://projectlombok.org/features/Log.html

*_@Cleanup (My favourite)_*

[source,java,linenums]
----
package com.imti.lombok;
import lombok.Cleanup;
import java.io.*;
//Created by imteyaza on 3/8/16.
public class ResourceCleanupLombok {
    public void readFile(String inputFileName, String outputFileName)
        throws IOException {
        @Cleanup InputStream inputStream = new FileInputStream(inputFileName);
        @Cleanup OutputStream outputStream = new FileOutputStream(outputFileName);
        byte[] buffer = new byte[1024];
        while (true) {
            int line = inputStream.read(buffer);
            if (line == -1) {
                break;
            }
            outputStream.write(buffer, 0, line);
        }
    }
}
----
[%hardbreaks]
By default it looks for a method called `close()` in the type of Object you are cleaning up.If you have a custom method name, it can called as `@Cleanup(&#34;destroy&#34;)`.

[NOTE]
`The destroy() method must be a non-argument method.`

*_@EqualsAndHashCode_*

If a class is annotated with @EqualsAndHashCode,it will use all non-static fields, by default. +
If you want to exclude some parameter, it can be done by defining `exclude={&#34;&lt;field name&gt;&#34;}`. If the `&lt;field name&gt;` does not exist, it will generate a warning.

[source,java,linenums]
----
package com.imti.lombok;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
//Created by imteyaza on 5/8/16.
@EqualsAndHashCode(exclude = {&#34;id&#34;,&#34;name&#34;,&#34;hell&#34;})
@Getter
@Setter
@ToString
public class EqualAndHashcodeExample {
    private static int COUNTER = 10;
    private String id;
    private String name;
    private String message;
}
----
This will generate a warning `The field &#39;hell&#39; does not exist`


*_@NoArgsConstructor, @RequiredArgsConstructor, @AllArgsConstructor_*

_@NoArgsConstructor:_ generates default or no-arguments constructor for the class.
_@RequiredArgsConstructor:_ creates a constructor with 1 parameter for each non-initialized final field.

[source,java,linenums]
----
package com.imti.lombok;
import lombok.*;
//Created by imteyaza on 6/8/16.
@Getter
@Setter
@ToString(exclude = {&#34;id&#34;, &#34;name&#34;})
@RequiredArgsConstructor
public class HelloLombok {
    private static final int VALUE = 10;
    private String id;
    private String name;
    private final String message;
}
----
will generate a class like below:

[source,java,linenums]
----
package com.imti.lombok;
import lombok.*;
// Created by imteyaza on 6/8/16.
public class HelloLombok {
    private static final int VALUE = 10;
    private String id;
    private String name;
    private final String message;
    //Other codes omitted for brevity
    public HelloLombok(final String message) {
        this.message = message;
    }
    //Other codes omitted for brevity
}
----

_@AllArgsConstructor:_ will create a constructor with all fields.

*_@Data_*

It bundles @Getter/@Setter, @ToString, @EqualsAndHashCode and @RequiredArgsConstructor.

*_Conclusion_*
These were some of the features provided by Lombok. Here is a link to list of all features-
`https://projectlombok.org/features/index.html`

*References*

_Lombok Project Page:_  https://projectlombok.org/index.html

_Download and installation instructions:_ https://projectlombok.org/download.html

_IntelliJ plugin and installation instructions:_ https://github.com/mplushnikov/lombok-intellij-plugin

_Sample application:_
https://github.com/ahmadimt/JavaWithLombok</description>
    </item>
    
    <item>
      <title>Create a static website with Hugo and Host it with Github Pages</title>
      <link>http://www.talcrafts.com/2017/03/create-a-static-website-with-hugo-and-host-it-with-github-pages/</link>
      <pubDate>Sun, 12 Mar 2017 17:37:02 +0530</pubDate>
      
      <guid>http://www.talcrafts.com/2017/03/create-a-static-website-with-hugo-and-host-it-with-github-pages/</guid>
      <description>*Indroduction*

In this article we will explain how to create a blog site with minimum cost and with absolutely no hosting server of our own.

*Tools Used*

- https://gohugo.io/[Hugo] : A fast and modern static website engine.
- Any text editor of your choice. I prefer https://atom.io/[Atom] because of its plugeable architecture and its in-built support for editing and previewing mark-down files.



*Steps Followed*

- Download and install https://gohugo.io/[Hugo]. More details provided in https://gohugo.io/overview/installing/[getting started] guide of Hugo.

- Once Hugo is installed, open a terminal and go the folder where you want to keep the code for your blog or static website.

- Run  `hugo new site &lt;your-site-name&gt;` to create a new website. It will create following directories in the folder:
[source]
    ----
    ├── archetypes
    ├── config.toml
    ├── content
    ├── data
    ├── layouts
    ├── public
    ├── static
    └── themes
    ----

- Now go to http://themes.gohugo.io/ and clone a theme of your choice in `themes` folder.

- Once done, copy the `config.toml` from the downloaded theme into the root folder of the the website and run `hugo server --buildDrafts` from the root directory. It will start the server on port 1313. You can access the site from `http://localhost:1313`

- To create a new blog entry, run `hugo new post/&lt;blog-file-name&gt;.md`. It will create a file in `content/post/` folder.

- Open the newly created file in any of the editor and start writing the content of the blog.

- Once you are done with your content, delete content of `public` folder and run `hugo` command to regenerate the files.

- Create a repo on https://github.com[Github] and check in the content of the `public` folder.

- Now go to you repository on https://github.com and create a new branch called `gh-pages`. Click on `settings` and go to `GitHub Pages` section of the page, you will see a message like `Your site is published at https://&lt;user_name&gt;.github.io/&lt;repo-name&gt;/`. You can use this link to access your static website or blog.

If you want to use custom domain please follow https://help.github.com/articles/using-a-custom-domain-with-github-pages/[this]

I have included some links that can be helpful while following these steps. Please feel free to ask any questions or help.

Any feedbacks or suggestions will be greatly appreciated.

*Reference*

- https://gohugo.io/
- https://atom.io/
- https://help.github.com/articles/using-a-custom-domain-with-github-pages/</description>
    </item>
    
    <item>
      <title>Spring boot CommandLineRunner Interface</title>
      <link>http://www.talcrafts.com/2017/03/spring-boot-commandlinerunner-interface/</link>
      <pubDate>Fri, 10 Mar 2017 22:30:46 +0530</pubDate>
      
      <guid>http://www.talcrafts.com/2017/03/spring-boot-commandlinerunner-interface/</guid>
      <description>**Introduction**

Spring Boot provides an interface called `CommandLineRunner` which is used indicate that a bean should run when it is contained within a `SpringApplication`.

We can define multiple `CommandLineRunner` beans in the same application context and set their order by using `Ordered` interface or by using `@Order` annotation.



[source,java,linenums]
----
public interface CommandLineRunner {

	/**
	 * Callback used to run the bean.
	 * @param args incoming main method arguments
	 * @throws Exception on error
	 */
	void run(String... args) throws Exception;

}
----

**Example**

Here we have two beans `Greeting` and `GreetingReply` which implement `CommandLineRunner` interface.

[source,java,linenums]
----
package com.talcrafts;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

@SpringBootApplication
public class BlogCodeApplication {

    public static void main(String[] args) {
        SpringApplication.run(BlogCodeApplication.class, args);
    }


    @Component
    @Order(1)
    class Greeting implements CommandLineRunner {

        @Override
        public void run(String... args) throws Exception {
            System.out.println(&#34;He said: Hello, how are you ?&#34;);
        }
    }

    @Component
    @Order(2)
    class GreetingReply implements CommandLineRunner {

        @Override
        public void run(String... args) throws Exception {
            System.out.println(&#34;She replied: I am doing good..thanks for asking!&#34;);
        }
    }

}
----

When we run this application, the following output is printed on console.

[source,java]
----
....
He said: Hello, how are you ?
She replied: I am doing good..thanks for asking! :
....
----

*Conclusion*

In this article, we saw how to use `CommandLineRunner` interface. It is very usefull when we don&#39;t have any UI to trigger something or we want something to execute just after the application context is up.</description>
    </item>
    
  </channel>
</rss>